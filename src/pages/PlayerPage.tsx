import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Slider } from "@/components/ui/slider";
import { Heart, MessageCircle, Share2, Save, ArrowLeft, Play, Pause, SkipBack, SkipForward } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

const PlayerPage = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration] = useState(236); // 3:56 in seconds
  const [volume, setVolume] = useState([75]);
  const [currentLyricIndex, setCurrentLyricIndex] = useState(0);
  const [isLiked, setIsLiked] = useState(false);
  const [isSaved, setIsSaved] = useState(false);

  const lyrics = [
    { time: 12, text: "Today I woke up feeling so alive" },
    { time: 18, text: "Coffee in my hand, dreams in my eyes" },
    { time: 24, text: "Walking down the street with a smile so bright" },
    { time: 30, text: "Everything's perfect in this morning light" },
    { time: 36, text: "Life's a song and I'm singing it loud" },
    { time: 42, text: "Dancing through the days, feeling so proud" },
    { time: 48, text: "Every moment counts, every breath divine" },
    { time: 54, text: "This is my story, this life is mine" },
  ];

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const togglePlay = () => {
    setIsPlaying(!isPlaying);
    if (!isPlaying) {
      toast({
        title: "🎵 Playing your song",
        description: "Enjoy your personalized creation!",
      });
    }
  };

  const handleLike = () => {
    setIsLiked(!isLiked);
    toast({
      title: isLiked ? "Removed from favorites" : "❤️ Added to favorites!",
      description: isLiked ? "Song removed from your liked songs" : "Song saved to your liked songs",
    });
  };

  const handleSave = () => {
    setIsSaved(!isSaved);
    toast({
      title: isSaved ? "Removed from collection" : "💾 Saved to collection!",
      description: isSaved ? "Song removed from your collection" : "Song saved to your personal collection",
    });
  };

  const handleShare = () => {
    navigator.clipboard.writeText(window.location.href);
    toast({
      title: "🔗 Link copied!",
      description: "Share your song with friends and family",
    });
  };

  // Simulate progress
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isPlaying && currentTime < duration) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          const newTime = prev + 1;
          // Update current lyric based on time
          const currentLyric = lyrics.findIndex(lyric => lyric.time <= newTime && 
            (lyrics[lyrics.findIndex(l => l === lyric) + 1]?.time > newTime || !lyrics[lyrics.findIndex(l => l === lyric) + 1]));
          if (currentLyric !== -1) {
            setCurrentLyricIndex(currentLyric);
          }
          return newTime;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isPlaying, currentTime, duration]);

  return (
    <div className="min-h-screen gradient-player text-white">
      {/* Header */}
      <header className="flex justify-between items-center p-6">
        <h1 className="text-3xl font-bold">Now Playing</h1>
        <Button 
          variant="secondary" 
          onClick={() => navigate("/")}
          className="bg-white text-primary hover:bg-white/90"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back
        </Button>
      </header>

      <div className="container mx-auto px-6 pb-8">
        {/* Song Info Card */}
        <Card className="bg-white text-foreground mb-8 player-shadow">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-2xl font-bold">My Life Symphony</h2>
                <p className="text-muted-foreground">Generated by AI • Pop Style • Medium Tempo</p>
              </div>
              <Button 
                onClick={handleSave}
                variant={isSaved ? "default" : "outline"}
                className="btn-shadow"
              >
                <Save className="w-4 h-4 mr-2" />
                {isSaved ? "Saved" : "Save"}
              </Button>
            </div>

            {/* Lyrics Display */}
            <div className="my-8 h-48 overflow-y-auto border-t pt-6 space-y-2">
              {lyrics.map((lyric, index) => (
                <p 
                  key={index}
                  className={`transition-all duration-300 ${
                    index === currentLyricIndex 
                      ? "text-primary font-semibold text-lg scale-105" 
                      : "text-muted-foreground"
                  }`}
                >
                  [{formatTime(lyric.time)}] {lyric.text}
                </p>
              ))}
            </div>

            {/* Player Controls */}
            <div className="space-y-6">
              <div className="flex items-center gap-4">
                <Button variant="outline" size="lg" className="rounded-full p-3">
                  <SkipBack className="w-5 h-5" />
                </Button>
                
                <Button 
                  onClick={togglePlay}
                  size="lg" 
                  className="rounded-full p-4 gradient-main hover:opacity-90"
                >
                  {isPlaying ? <Pause className="w-6 h-6" /> : <Play className="w-6 h-6" />}
                </Button>
                
                <Button variant="outline" size="lg" className="rounded-full p-3">
                  <SkipForward className="w-5 h-5" />
                </Button>

                <div className="flex-1 space-y-2">
                  <Slider
                    value={[currentTime]}
                    max={duration}
                    step={1}
                    className="w-full"
                    onValueChange={(value) => setCurrentTime(value[0])}
                  />
                  <div className="flex justify-between text-sm text-muted-foreground">
                    <span>{formatTime(currentTime)}</span>
                    <span>{formatTime(duration)}</span>
                  </div>
                </div>
              </div>

              {/* Action Buttons and Volume */}
              <div className="flex justify-between items-center">
                <div className="flex gap-3">
                  <Button 
                    variant={isLiked ? "default" : "outline"}
                    onClick={handleLike}
                    className="btn-shadow"
                  >
                    <Heart className={`w-4 h-4 mr-2 ${isLiked ? "fill-current" : ""}`} />
                    Like
                  </Button>
                  <Button variant="outline" className="btn-shadow">
                    <MessageCircle className="w-4 h-4 mr-2" />
                    Comment
                  </Button>
                  <Button variant="outline" onClick={handleShare} className="btn-shadow">
                    <Share2 className="w-4 h-4 mr-2" />
                    Share
                  </Button>
                </div>
                
                <div className="flex items-center gap-3">
                  <span className="text-2xl">🔊</span>
                  <Slider
                    value={volume}
                    onValueChange={setVolume}
                    max={100}
                    step={1}
                    className="w-32"
                  />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Music Visualizer */}
        <Card className="bg-black/80 border-0 ktv-glow">
          <CardContent className="p-8">
            <div className="h-64 flex items-end justify-center gap-2">
              {/* Animated visualizer bars */}
              {Array.from({ length: 32 }).map((_, i) => (
                <div
                  key={i}
                  className={`bg-gradient-to-t from-primary to-secondary-light w-3 rounded-t transition-all duration-300 ${
                    isPlaying ? "visualizer-bar" : "h-4"
                  }`}
                  style={{
                    animationDelay: `${i * 50}ms`,
                    height: isPlaying ? `${Math.random() * 80 + 20}%` : "16px"
                  }}
                />
              ))}
            </div>
            <div className="text-center mt-6">
              <p className="text-white/60 text-lg">
                {isPlaying ? "🎵 Music Visualizer Active" : "🎵 Press play to see the magic"}
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default PlayerPage;